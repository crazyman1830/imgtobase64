#!/usr/bin/env python3
"""
Script to create test data files for the image base64 converter tests.

This script creates various test files including:
- Valid image files in different formats
- Corrupted/invalid image files
- Empty files
- Non-image files
"""
import os
import tempfile
from pathlib import Path


def create_test_data_directory():
    """Create test data directory with various test files."""
    # Create test data directory
    test_data_dir = Path(__file__).parent
    test_data_dir.mkdir(exist_ok=True)
    
    # Create valid image files
    create_valid_images(test_data_dir)
    
    # Create invalid/corrupted files
    create_invalid_files(test_data_dir)
    
    # Create edge case files
    create_edge_case_files(test_data_dir)
    
    print(f"Test data files created in: {test_data_dir}")


def create_valid_images(test_dir):
    """Create valid minimal image files for each supported format."""
    
    # Minimal PNG file (1x1 transparent pixel)
    png_data = bytes([
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,  # PNG signature
        0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,  # IHDR chunk
        0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,  # 1x1 dimensions
        0x08, 0x06, 0x00, 0x00, 0x00, 0x1F, 0x15, 0xC4,  # RGBA, CRC
        0x89, 0x00, 0x00, 0x00, 0x0B, 0x49, 0x44, 0x41,  # IDAT chunk
        0x54, 0x78, 0x9C, 0x62, 0x00, 0x02, 0x00, 0x00,  # Compressed data
        0x05, 0x00, 0x01, 0x0D, 0x0A, 0x2D, 0xB4, 0x00,  # CRC
        0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE,  # IEND chunk
        0x42, 0x60, 0x82
    ])
    
    # Minimal GIF file (1x1 transparent pixel)
    gif_data = bytes([
        0x47, 0x49, 0x46, 0x38, 0x39, 0x61,  # GIF89a signature
        0x01, 0x00, 0x01, 0x00,              # 1x1 dimensions
        0x80, 0x00, 0x00,                    # Global color table
        0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF,  # Color table entries
        0x21, 0xF9, 0x04, 0x01, 0x00, 0x00,  # Graphic control extension
        0x00, 0x00, 0x2C, 0x00, 0x00, 0x00,  # Image descriptor
        0x00, 0x01, 0x00, 0x01, 0x00, 0x00,  # Image data
        0x02, 0x02, 0x04, 0x01, 0x00, 0x3B   # LZW data and trailer
    ])
    
    # Minimal JPEG file
    jpg_data = bytes([
        0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10, 0x4A, 0x46,  # JPEG header
        0x49, 0x46, 0x00, 0x01, 0x01, 0x01, 0x00, 0x48,
        0x00, 0x48, 0x00, 0x00, 0xFF, 0xDB, 0x00, 0x43,
        0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08,
        0x07, 0x07, 0x07, 0x09, 0x09, 0x08, 0x0A, 0x0C,
        0x14, 0x0D, 0x0C, 0x0B, 0x0B, 0x0C, 0x19, 0x12,
        0x13, 0x0F, 0x14, 0x1D, 0x1A, 0x1F, 0x1E, 0x1D,
        0x1A, 0x1C, 0x1C, 0x20, 0x24, 0x2E, 0x27, 0x20,
        0x22, 0x2C, 0x23, 0x1C, 0x1C, 0x28, 0x37, 0x29,
        0x2C, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1F, 0x27,
        0x39, 0x3D, 0x38, 0x32, 0x3C, 0x2E, 0x33, 0x34,
        0x32, 0xFF, 0xC0, 0x00, 0x11, 0x08, 0x00, 0x01,
        0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11,
        0x01, 0x03, 0x11, 0x01, 0xFF, 0xC4, 0x00, 0x14,
        0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x08, 0xFF, 0xC4, 0x00, 0x14, 0x10, 0x01,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0xFF, 0xDA, 0x00, 0x0C, 0x03, 0x01, 0x00, 0x02,
        0x11, 0x03, 0x11, 0x00, 0x3F, 0x00, 0xB2, 0xC0,
        0x07, 0xFF, 0xD9
    ])
    
    # Minimal BMP file (1x1 pixel)
    bmp_data = bytes([
        0x42, 0x4D, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00,  # BMP header
        0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x28, 0x00,  # DIB header
        0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,  # 1x1 dimensions
        0x00, 0x00, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00,  # 24-bit color
        0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  # Image size
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  # Resolution
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,  # Pixel data
        0xFF, 0x00
    ])
    
    # Create valid image files
    valid_images = {
        'valid_image.png': png_data,
        'valid_image.jpg': jpg_data,
        'valid_image.jpeg': jpg_data,  # Same as JPG
        'valid_image.gif': gif_data,
        'valid_image.bmp': bmp_data,
    }
    
    for filename, data in valid_images.items():
        filepath = test_dir / filename
        with open(filepath, 'wb') as f:
            f.write(data)
        print(f"Created: {filename}")


def create_invalid_files(test_dir):
    """Create invalid/corrupted files for error testing."""
    
    # Corrupted PNG (invalid header)
    corrupted_png = bytes([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00])
    
    # Corrupted JPEG (truncated)
    corrupted_jpg = bytes([0xFF, 0xD8, 0xFF, 0xE0, 0x00, 0x10])
    
    # File with PNG extension but different content
    fake_png = b"This is not a PNG file"
    
    # File with wrong extension
    wrong_ext_data = bytes([
        0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,  # PNG signature
        0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52,  # but with .txt extension
    ])
    
    invalid_files = {
        'corrupted.png': corrupted_png,
        'corrupted.jpg': corrupted_jpg,
        'fake.png': fake_png,
        'wrong_extension.txt': wrong_ext_data,
    }
    
    for filename, data in invalid_files.items():
        filepath = test_dir / filename
        with open(filepath, 'wb') as f:
            f.write(data)
        print(f"Created: {filename}")


def create_edge_case_files(test_dir):
    """Create edge case files for comprehensive testing."""
    
    # Empty file
    empty_file = test_dir / 'empty.png'
    empty_file.touch()
    
    # Very small file
    tiny_file = test_dir / 'tiny.jpg'
    with open(tiny_file, 'wb') as f:
        f.write(b'\xFF\xD8')  # Just JPEG start marker
    
    # Non-image files with image extensions
    text_as_png = test_dir / 'text_file.png'
    with open(text_as_png, 'w') as f:
        f.write("This is a text file with PNG extension")
    
    # Binary file with image extension
    binary_as_gif = test_dir / 'binary_file.gif'
    with open(binary_as_gif, 'wb') as f:
        f.write(b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\x09')
    
    # Regular text files (should be ignored)
    readme = test_dir / 'README.txt'
    with open(readme, 'w') as f:
        f.write("This is a readme file and should be ignored during scanning")
    
    config_file = test_dir / 'config.json'
    with open(config_file, 'w') as f:
        f.write('{"test": "configuration"}')
    
    print("Created edge case files:")
    print(f"  - {empty_file.name}")
    print(f"  - {tiny_file.name}")
    print(f"  - {text_as_png.name}")
    print(f"  - {binary_as_gif.name}")
    print(f"  - {readme.name}")
    print(f"  - {config_file.name}")


if __name__ == '__main__':
    create_test_data_directory()