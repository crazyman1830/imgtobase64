# Docker Compose configuration for Image Base64 Converter
version: '3.8'

services:
  # Main application service
  app:
    build: .
    container_name: image-converter-app
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=production
      - WEB_HOST=0.0.0.0
      - WEB_PORT=8080
      - CACHE_BACKEND=redis
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      - MAX_FILE_SIZE_MB=10
      - ENABLE_SECURITY_SCAN=true
      - MAX_CONCURRENT_PROCESSING=5
      - ENABLE_MEMORY_OPTIMIZATION=true
    volumes:
      - app_data:/app/data
      - app_logs:/app/logs
      - app_cache:/app/cache
      - app_temp:/app/temp
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: image-converter-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: image-converter-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - app_network
    profiles:
      - with-nginx

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: image-converter-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - app_network
    profiles:
      - monitoring

  # Grafana dashboard (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: image-converter-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - app_network
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  app_data:
    driver: local
  app_logs:
    driver: local
  app_cache:
    driver: local
  app_temp:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network for service communication
networks:
  app_network:
    driver: bridge